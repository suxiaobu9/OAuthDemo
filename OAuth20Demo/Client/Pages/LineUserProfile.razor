@page "/LineUserProfile"
@using OAuth20Demo.Shared;
@using Blazored.LocalStorage;

@inject HttpClient httpClient
@inject ILocalStorageService localStorageService
@inject NavigationManager uriHelper

<div class="d-flex flex-column">
    <div>
        @if (NotifyToken == null)
        {
            <a href="@LineNotifyUrl" class="btn btn-success">Line Notify</a>
        }
        else
        {
            <button @onclick="RevokeNotifyAsync" class="btn btn-success">解除 Notify 連結</button>
        }
    </div>
    <div>
        @userProfile?.name
    </div>
    <div>
        @userProfile?.email
    </div>
    <div>
        <img src="@userProfile?.picture" style="max-height:300px" />
    </div>
    <div class="mt-2">
        <button class="btn btn-warning" @onclick="LogoutAsync">登出</button>
    </div>
    @if (NotifyToken != null)
    {
        <div class="mt-2">
            <textarea @bind="Message"></textarea>
        </div>
        <div>
            <button class="btn btn-success" @onclick="SendMessageAsync">送出訊息</button>
        </div>
    }
</div>


@code {

    private string? Message { get; set; }
    private LineUserProfileModel? userProfile { get; set; }
    private string LineNotifyUrl => $"https://notify-bot.line.me/oauth/authorize?response_type=code&client_id={LineNotifyClientId}&redirect_uri={LineNotifyCallBack}&scope=notify&state=notify";

    private string? LineNotifyClientId { get; set; }
    private string? LineNotifyCallBack { get; set; }

    private LineNotifyTokenModel? NotifyToken { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var lineTokenModel = await localStorageService.GetItemAsync<LineTokenModel>("LineToken");

        httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {lineTokenModel.id_token}");

        var response = await httpClient.GetAsync("Line/GetUserProfile");

        if (!response.IsSuccessStatusCode)
        {
            uriHelper.NavigateTo("", true);
            return;
        }

        userProfile = await response.Content.ReadFromJsonAsync<LineUserProfileModel>();

        var lineNotifyClientIdResponse = await httpClient.GetAsync("/OAuth20Params/GetLineNotifyClientId");
        LineNotifyClientId = await lineNotifyClientIdResponse.Content.ReadAsStringAsync();
        var lineNotifyCallBackResponse = await httpClient.GetAsync("/OAuth20Params/GetLineNotifyCallBack");
        LineNotifyCallBack = await lineNotifyCallBackResponse.Content.ReadAsStringAsync();

        if (await localStorageService.ContainKeyAsync("NotifyToken"))
        {
            NotifyToken = await localStorageService.GetItemAsync<LineNotifyTokenModel>("NotifyToken");
        }
    }

    private async Task LogoutAsync()
    {
        var token = await localStorageService.GetItemAsync<LineTokenModel>("LineToken");
        var dic = new Dictionary<string, string>
        {
            {"accessToken", token.access_token??"" }
        };

        var response = await httpClient.PostAsync("Line/Logout", new FormUrlEncodedContent(dic));

        if (response.IsSuccessStatusCode)
        {

            await localStorageService.RemoveItemsAsync(new string[] { "LineState", "LineToken" });

            uriHelper.NavigateTo("", true);
        }
    }

    private async Task RevokeNotifyAsync()
    {
        var dic = new Dictionary<string, string>
        {

            { "accessToken" , NotifyToken?.access_token??""}
        };

        var response = await httpClient.PostAsync("Line/RevokeNotify", new FormUrlEncodedContent(dic));

        if (!response.IsSuccessStatusCode)
            return;

        NotifyToken = null;

        await localStorageService.RemoveItemAsync("NotifyToken");

        //using var cusHttpClient = new HttpClient();

        //cusHttpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {NotifyToken?.access_token}");

        //var response = await cusHttpClient.PostAsync("https://notify-api.line.me/api/revoke", null);

        //if (!response.IsSuccessStatusCode)
        //    NotifyToken = null;

    }

    private async Task SendMessageAsync()
    {

        var dic = new Dictionary<string, string>
        {

            { "accessToken" , NotifyToken?.access_token??""},
            { "message" , Message??""},

        };

        var response = await httpClient.PostAsync("Line/Notify", new FormUrlEncodedContent(dic));

        if (!response.IsSuccessStatusCode)
            return;

        Message = "";
    }
}
